openapi: "3.0.0"
info:
  title: Otto user service
  version: "1.0"
paths:
  /user:
    post:
      operationId: createNewUser
      summary: Create a new user
      requestBody:
        description: user to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewUser"
      responses:
        '201':
          description: |-
            201 response
    put:
      operationId: updateUserV1
      summary: Update a username
      requestBody:
        description: user to update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        '200':
          description: |-
            200 response
  /user/{username}:
    get:
      operationId: getUserByUsernameV1
      summary: Get a user by username
      parameters:
        - in: path
          name: username
          description: a username
          required: true
          schema:
            type: string
      responses:
        '200':
          description: |-
            200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /session:
    post:
      operationId: createNewSesssion
      summary: Create a new user session
      requestBody:
        description: session to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewSession"
      responses:
        '201':
          description: |-
            201 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"
    get:
      operationId: getSession
      summary: Get a session
      parameters:
        - in: query
          name: token
          schema:
            type: string
      responses:
        '200':
          description: |-
            200 response
        '403':
          description: |-
            403 response
    put:
      operationId: respondToChallenge
      summary: Respond to an authentication challenge
      requestBody:
        description: authentication to use in response
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewSession"
      responses:
        '200':
          description: |-
            200 response
    patch:
      operationId: updateUserSession
      summary: Update a user's session
      requestBody:
        description: session to update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SessionRefresh"
      responses:
        '200':
          description: |-
            200 response
    delete:
      operationId: deleteSessionV1
      summary: Delete a user's session (log out)
      parameters:
        - in: query
          name: token
          schema:
            type: string
      responses:
        '200':
          description: 200 response
  /otp:
    post:
      operationId: submitOTPV1
      summary: Submit a new OTP
      requestBody:
        description: OTP to submit
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OTP"
      responses:
        '200':
          description: 200 submitted
  /forgot-password:
    post:
      operationId: submitForgotPasswordV1
      summary: Submit a forgot password request
      requestBody:
        description: User whose password needs to be reset
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        '200':
          description: 200 submitted
    put:
      operationId: confirmForgotPasswordV1
      summary: Confirm a forgotten password
      requestBody:
        description: User to reset
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OTP"
      responses:
        '200':
          description: 200 submitted
  /invite:
    post:
      operationId: createInviteV1
      summary: create an invite
      responses:
        '201':
          description: 201 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invite"
    get:
      operationId: getInvitesV1
      summary: get invites
      parameters:
        - in: query
          name: offset
          description: a number, offset from beginning
          schema:
            type: string
      responses:
        '200':
          description: a list of invites
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Invite'
  /group:
    get:
      operationId: getGroupV1
      summary: get a group
      responses:
        '200':
          description: |-
            200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
    post:
      operationId: createGroupV1
      summary: create a group
      requestBody:
        description: group to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewGroup"
      responses:
        '201':
          description: |-
            201 response
  /ban/{username}:
    post:
      operationId: banUserV1
      summary: ban a user
      parameters:
        - in: path
          name: username
          description: a username
          required: true
          schema:
            type: string
      responses:
        '201':
          description: |-
            201 user banned
    delete:
      operationId: unbanUserV1
      summary: unban a user
      parameters:
        - in: path
          name: username
          description: a username
          required: true
          schema:
            type: string
      responses:
        '201':
          description: |-
            201 user unbanned
components:
  schemas:
    User:
      type: object
      required:
        - id
        - uuid
        - username
        - name
        - email
        - birthday
        - verified
      properties:
        id:
          type: integer
          format: int64
        uuid:
          type: string
          format: uuid
        name:
          type: string
        username:
          type: string
        profile_pic:
          type: string
        bio_message:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        role:
          $ref: "#/components/schemas/Role"
        is_banned:
          type: boolean
          default: false
        birthday:
          type: string
          format: birthday
        address_street:
          type: string
        address_city:
          type: string
        address_zip:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    NewUser:
      type: object
      required:
        - email
        - username
        - password
        - invite_code
      properties:
       name:
          type: string
       email:
         type: string
         format: email
       username:
         type: string
       password:
         type: string
       invite_code:
         type: string
    OTP:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        code:
          type: string
    Session:
      type: object
      required:
        - user
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
    NewSession:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
    SessionRefresh:
      type: object
      required:
        - token
      properties:
        token:
          type: string
    Invite:
      type: object
      required:
        - code
      properties:
        code:
          type: string
    Role:
      type: string
      enum:
        - user
        - moderator
        - admin
